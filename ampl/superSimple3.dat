#amount of vehicles
param nv := 1;

#amount of orders = orders + amount of vehicles
param nn := 3;

#amount of factories
param nf := 1;

#amount of distance instervals in cost structure
param na := 2;

#amount of weight intervals in cost structure
param nb := 3;

#amount of unique stop positions
param ns := 2;

#Factory sets
set N_f[1] := 4 5;


#Location sets
set L[1] := 1 2;
set L[2] := 4 5;

#Vehicle node sets
set N_v[1] := 1 2 3 4 5 6;

#pickup nodes
set N_vp[1] := 1 2 3;

#Time window sets
param pi := 1 1	 2 2  3 1  4 2	5 2  6 1;

#Origin and destination of vehicles all 
param o_v := 1 3;
param d_v := 1 6;

#Costs per km
param C_km := 
	[1, *, *]: 	1	2	3	:=
			1 	4	5	6	
			2	5	7	9	;
			
#Costs per kg
param C_kg := 
	[1, *, *]: 	1	2	3	:=
			1 	1	2	3	
			2	1	2	3	;

#Costs fixed
param C_fix := 
	[1, *, *]: 	1 	2 	3	:=
			1 	50	50	50
			2	50	50 	50;

			
#Costs to make a stop
param C_stop :	1	2	3	4	5	6	:=
			1	10	10	0	10	10	0	;	

#No pickup penalty cost
param C := 1 2000 2 2000 3 0;

#Capacity of each vehicle
param K := 1 30;

#Hubstops capacities
param H := 1 1;

#Weight of each Order
param Q := 1 15 2 15 3 0;

#Time window lower bounds
param T_l:	1 	2	:=
		1	0	.
		2	0	10
		3	0	.
		4	10	32	
		5	10	32
		6	0	.	;

#Time window upper bounds
param T_u: 	1 	2	:=
		1	10	.
		2	10	30
		3	16	.	
		4	20	60	
		5	20	60
		6	100	.	;
		
#Travel time
param T:= 
	[1, *, *]:	1	2	3	4	5	6	:=
			1	.	0	50	15	15	0	
			2	0	.	50	15	15	0	
			3	0	0	.	0	0	0
			4	15	15	50	.	0	0
			5	15	15	50	0	.	0
			6	50	50	50	50	50	.	;

#Travel Distance
param D:		1	2	3	4	5	6	:=
			1	.	0	50	15	15	0	
			2	0	.	50	15	15	0	
			3	0	0	.	0	0	0
			4	15	15	50	.	0	0
			5	15	15	50	0	.	0
			6	50	50	50	50	50	.	;

#Distance interval for cost matrix
param B:= 0 0 1 20  2 200;

#Weight interval for cost matrix
param Z:= 0 0 1 18  2 20  3 200;
			
